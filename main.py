import asyncio
import os
import logging
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.client.default import DefaultBotProperties
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger

API_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
scheduler = AsyncIOScheduler()

# –•—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_progress = {}
last_step_time = {}

# 7-–¥–Ω–µ–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
routes = {
    1: ["–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GlowMe üåü", "–®–∞–≥ 1: –ù–∞–ø–∏—à–∏, —á–µ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å."],
    2: ["–®–∞–≥ 2: –î—ã—Ö–∞–Ω–∏–µ –∂–∏–≤–æ—Å—Ç–∏", "–°–¥–µ–ª–∞–π 3 –≤–¥–æ—Ö–∞ —Å –æ—â—É—â–µ–Ω–∏–µ–º —Ç–µ–ª–∞. –ì–¥–µ —Ç—ã —Å–µ–π—á–∞—Å?"],
    3: ["–®–∞–≥ 3: –¢–≤–æ—ë —Ç–µ–ª–æ ‚Äî –Ω–µ –≤—Ä–∞–≥", "–ü–æ–ª–æ–∂–∏ —Ä—É–∫—É –Ω–∞ –≥—Ä—É–¥—å. –ü–æ–±—É–¥—å —Å —ç—Ç–∏–º –æ—â—É—â–µ–Ω–∏–µ–º 1 –º–∏–Ω—É—Ç—É."],
    4: ["–®–∞–≥ 4: –Ø –∏–º–µ—é –ø—Ä–∞–≤–æ —Ö–æ—Ç–µ—Ç—å", "–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –±–ª–∏–∂–∞–π—à–∏–µ 24 —á–∞—Å–∞?"],
    5: ["–®–∞–≥ 5: –û—Ç–ø—É—Å–∫–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—è", "–ù–∞–ø–∏—à–∏: —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –º–æ–∂–Ω–æ –æ—Ç–ø—É—Å—Ç–∏—Ç—å?"],
    6: ["–®–∞–≥ 6: –ì—Ä–∞–Ω–∏—Ü—ã –∏ —Å–≤–æ–±–æ–¥–∞", "–ù–∞–∑–æ–≤–∏ –æ–¥–Ω–æ ¬´–Ω–µ—Ç¬ª –∏ –æ–¥–Ω–æ ¬´–¥–∞¬ª —Å–µ–±–µ —Å–µ–≥–æ–¥–Ω—è."],
    7: ["–®–∞–≥ 7: –†–∏—Ç—É–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è", "–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π —Å —ç—Ç–æ–≥–æ –ø—É—Ç–∏?"]
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ ‚Äî –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ—á—å—é
def is_daytime():
    now = datetime.now().time()
    return now >= datetime.strptime("08:00", "%H:%M").time() and now <= datetime.strptime("22:00", "%H:%M").time()

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 6 —á–∞—Å–æ–≤
async def send_reminder(user_id, day):
    if user_progress.get(user_id, 0) == day:
        if is_daytime():
            await bot.send_message(user_id, f"‚ú® –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ø—Ä–æ–¥–æ–ª–∂–∏–º –î–µ–Ω—å {day}?")
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 6 —á–∞—Å–æ–≤
        schedule_reminder(user_id, day)

def schedule_reminder(user_id, day):
    reminder_time = datetime.now() + timedelta(hours=6)
    scheduler.add_job(send_reminder, trigger=DateTrigger(reminder_time), args=[user_id, day])

# –û–±—Ä–∞–±–æ—Ç–∫–∞ /start
@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    user_progress[user_id] = 1
    last_step_time[user_id] = datetime.now()
    day = 1
    for step in routes[day]:
        await message.answer(step)
    schedule_reminder(user_id, day)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—É—â–∏–π —à–∞–≥
@dp.message()
async def handle_response(message: types.Message):
    user_id = message.from_user.id
    current_day = user_progress.get(user_id, 1)
    last_step_time[user_id] = datetime.now()
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
    if current_day >= 7:
        await message.answer("–¢—ã –ø—Ä–æ—à–ª–∞ –≤–µ—Å—å 7-–¥–Ω–µ–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç üíõ")
        return

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é
    next_day = current_day + 1
    user_progress[user_id] = next_day
    for step in routes[next_day]:
        await message.answer(step)
    schedule_reminder(user_id, next_day)

# –ó–∞–ø—É—Å–∫
async def main():
    logging.basicConfig(level=logging.INFO)
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
